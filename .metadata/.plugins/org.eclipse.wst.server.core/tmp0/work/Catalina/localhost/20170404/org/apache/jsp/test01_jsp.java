/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.42
 * Generated at: 2017-04-04 01:12:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	String name = "test01 jsp";
	public int addNumber(int a, int b) {
		return a + b;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 지시문(directive) -->\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>test01</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    여기는 일반 html 영역입니다.<br/>\r\n");
      out.write("\t<!--스클립 틀립(scliptlet) -->\r\n");
      out.write("\t<!--jsp 페이지내에서 java 코드가 사용되어지는 공간 -->\r\n");
      out.write("\t<!--html 코드와 섞아사 사용 할 수 있다. -->\r\n");
      out.write("\t<!--여러가지 jsp 내장 객체(기본적으로 주어지는 jsp관련객체)를 사용할 수 있다. -->\r\n");
      out.write("\r\n");
      out.write("    <!--html : 클라이언트 에게 보여줄 페이지를 꾸미는 공간 -->\r\n");
      out.write("    <!--프로그래밍 적인 요소가 없다. -->\r\n");
      out.write("    <!--html코드와 비지니스 로직을 한번에 만들어 낼수가 있다. -->\n");
      out.write("\r\n");
      out.write("    <!--단점 : 디자이너와 개발자 사이의 업무분담이 애매해진다. 충돌도 많이 일어난다. -->\r\n");
      out.write("\r\n");
      out.write("    <!--스클립틀릿의 자바코드가 모두 실행이 완료 되어야 클라이언트가 페이지를 볼 수있다.-->\r\n");
      out.write("    스클립트 시작<br/>\r\n");
      out.write("\t");

	  for(int i = 0 ; i<=10 ; i++){
          //안에 있는 out은 프린터 객체(내장 객체)
	    out.println("Hello World" + i + "<br/>");
	  }
	
      out.write("\r\n");
      out.write("    스클립트 끝<br/>\r\n");
      out.write("    표현식 시작<br/>\r\n");
      out.write("    <!-- 표현식\r\n");
      out.write("         자바의 식을 표현하고, 세미콜론(;)이 필요 없다.\r\n");
      out.write("         표현하려고 하는 하나의 식만 와야한다.\r\n");
      out.write("         여러문장이 올수 없고 단 하나의 식만 와야한다.\r\n");
      out.write("         존재하지 않는 변수나 매소드는 사용 될 수 없다.\r\n");
      out.write("     -->\r\n");
      out.write("    1+2 = ");
      out.print( 1+2 );
      out.write("<br/>\r\n");
      out.write("    addNumber(10,20)의 결과 = ");
      out.print( addNumber(10,20) );
      out.write("<br/>\r\n");
      out.write("    ");
      out.write(' ');
      out.print( name );
      out.write("\r\n");
      out.write("    표현식 시작<br/>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
